y = 5
y = 5
install.packages("devtools")
require(devtools)
find_rtools
find_rtools()
install.packages("KernSmooth")
require(KernSmooth)
install.packages('caret')
require(caret)
?caret
help(package = 'caret')
source('~/.active-rstudio-document')
cmat = makeCacheMatrix()
cmat$set(matrix(runif(25), 5, 5))
cmat
cmat$get()
cmat$getInverse
cmat$getInverse()
cacheSolve(cmat)
cmat$getInverse()
source('~/.active-rstudio-document')
install.packages(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training    = adData[trainIndex,]
testing     = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
training    = adData[trainIndex,]
testing     = adData[-trainIndex,]
length(training)
length(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x = concrete, y=c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer", "CoarseAggregate", "FineAggregate", "Age"))
require(Hmisc)
cols =
install.packages('Hmisc')
plot(concrete$CompressiveStrength, data=concrete)
plot(concrete$CompressiveStrength, data=concrete, pch=19)
colours = concrete$Superplasticizer
plot(concrete$CompressiveStrength, col = colours, data=concrete, pch=19)
cut2
require(Hmisc)
?cut2
colours = cut2(concrete$Superplasticizer, 5)
plot(concrete$CompressiveStrength, col = colours, data=concrete, pch=19)
colours = cut2(concrete$FlyAsh, 5)
plot(concrete$CompressiveStrength, col = colours, data=concrete, pch=19)
colours = cut2(concrete$Water, 5)
plot(concrete$CompressiveStrength, col = colours, data=concrete, pch=19)
colours = cut2(concrete$Water, 15)
plot(concrete$CompressiveStrength, col = colours, data=concrete, pch=19)
plot(concrete$CompressiveStrength, col = colours, pch=19)
warnings()
colours = cut2(concrete$Water, 15)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Age, 15)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Age, 5)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$CoarseAggregate, 5)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = concrete$CoarseAggregate
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = concrete$FineAggregate
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = concrete$FlyAsh
plot(concrete$CompressiveStrength, col = colours, pch=19)
nrow(concrete)
length(unique(concrete$FlyAsh))
colours = cut2(concrete$FlyAsh, 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
head(colours)
colours
colours = cut2(concrete$FlyAsh, n=10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours
colours = cut2(concrete$FlyAsh, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
summary(concrete)
colours = cut2(concrete$Cement, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$FlyAsh, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Water, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$BlastFurnaceSlag, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$CoarseAggregate, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$FineAggregate, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Age, g = 10)
plot(concrete$CompressiveStrength, col = colours, pch=19)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
colours = cut2(concrete$Age, g = 10)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$FlyAsh, g = 10)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Cement, g = 10)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$BlastFurnaceSlag, g = 10)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$BlastFurnaceSlag, g = 4)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$FlyAsh)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$FlyAsh, g=4)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Superplasticizer)
plot(training$CompressiveStrength, col = colours, pch=19)
#### Q3
colours = cut2(concrete$Superplasticizer, g=4)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$CoarseAggregate, g=4)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$FineAggregate, g=4)
plot(training$CompressiveStrength, col = colours, pch=19)
colours = cut2(concrete$Age, g=4)
plot(training$CompressiveStrength, col = colours, pch=19)
length(unique(training$FlyAsh))
hist(training$Superplasticizer)
lSp = log(training$Superplasticizer)
head(lSp)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(names(training))
length(names(training))
ilNames = which(grepl("^IL.*", names(training)))
names(training)[ilNames]
pcs = preProcess(data = newTraining, method="pca", thresh = 0.9)
newTraining = training[, ilNames]
pcs = preProcess(data = newTraining, method="pca", thresh = 0.9)
pcs = preProcess(newTraining, method="pca", thresh = 0.9)
summary(pcs)
pcs$pcaComp
pcs
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ilNames = which(grepl("^IL.*", names(training)))
diagnos = which(names(training) == "diagnosis")
newTraining = training[, c(ilNames, diagnosis)]
View(newTraining)
ilNames = which(grepl("^IL.*", names(training)))
diagnos = which(names(training) == "diagnosis")
newTraining = training[, c(ilNames, diagnos)]
View(newTraining)
ncol(newTraining)
?preProcess
?train
# Model with Raw data
modRaw = train(newTraining[,-13], newTraining[,13], method = "glm")
# Model with PCA data
trCont = trainControl(preProcOptions = list(thresh = 0.8))
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", trControl = trCont)
install.packages('e1071')
# Model with Raw data
modRaw = train(newTraining[,-13], newTraining[,13], method = "glm")
# Model with PCA data
trCont = trainControl(preProcOptions = list(thresh = 0.8))
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", trControl = trCont)
confusionMatrix(testing$diagnosis, predict(modRaw, testing))
confusionMatrix(testing$diagnosis, predict(modPca, testing))
newTraining = training[, c(ilNames, diagnos)]
newTesting  = testing[, c(ilNames, diagnos)]
# Model with Raw data
modRaw = train(newTraining[,-13], newTraining[,13], method = "glm")
# Model with PCA data
trCont = trainControl(preProcOptions = list(thresh = 0.8))
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", trControl = trCont)
#Look at results
confusionMatrix(testing$diagnosis, predict(modRaw, testing))
confusionMatrix(testing$diagnosis, predict(modPca, testing))
# Model with PCA data
ppo = list(thresh = 0.8))
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", preProcOptions = ppo)
#Look at results
confusionMatrix(testing$diagnosis, predict(modRaw, testing))
confusionMatrix(testing$diagnosis, predict(modPca, testing))
newTraining = training[, c(ilNames, diagnos)]
newTesting  = testing[, c(ilNames, diagnos)]
# Model with Raw data
modRaw = train(newTraining[,-13], newTraining[,13], method = "glm")
# Model with PCA data
ppo = list(thresh = 0.8))
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", preProcOptions = ppo)
#Look at results
confusionMatrix(newTesting$diagnosis, predict(modRaw, newTesting))
confusionMatrix(newTesting$diagnosis, predict(modPca, newTesting))
# Model with PCA data
ppo = list(thresh = 0.8)
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", preProcOptions = ppo)
#Look at results
confusionMatrix(newTesting$diagnosis, predict(modRaw, newTesting))
confusionMatrix(newTesting$diagnosis, predict(modPca, newTesting))
# Model with PCA data
ppo = list(thresh = 0.8, ICAcomp = 3, k = 5)
trc = trainControl(preProcOptions = ppo)
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", trControl = trCont)
confusionMatrix(newTesting$diagnosis, predict(modPca, newTesting))
View(newTesting)
?trainControl
# Model with PCA data
ppo = list(thresh = 0.8, ICAcomp = 3, k = 5)
trc = trainControl(method="none", preProcOptions = ppo)
modPca = train(newTraining[,-13], newTraining[,13], method = "glm", preProcess = "pca", trControl = trCont)
confusionMatrix(newTesting$diagnosis, predict(modPca, newTesting))
#### Q3
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
length(unique(training$Superplasticizer))
nrow(training)
summary(training$Superplasticizer)
hist(log(1+training$Superplasticizer))
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
modelFit =  train(Case ~ ., data = training, method = 'rpart')
inTrain = createDataPartition(y = segmentationOriginal$Case, p=0.7, list=FALSE)
training = segmentationOriginal[inTrain,]
testing  = segmentationOriginal[-inTrain,]
set.seed(125)
modelFit =  train(Case ~ ., data = training, method = 'rpart')
modelFit$finalModel
head(segmentationOriginal)
set.seed(125)
modelFit =  train(Class ~ ., data = training, method = 'rpart')
modelFit$finalModel
plot(modelFit$finalModel)
install.packages('rattle')
require(rattle)
fancyRpartPlot(modelFit$finalModel)
modelFit$finalModel
set.seed(125)
modelFit =  train(Class ~ ., data = training, method = 'rpart')
modelFit$finalModel
head(segmentationOriginal)
unique(segmentationOriginal$Case)
inTrain = which(segmentationOriginal$Case == "Train")
inTrain = which(segmentationOriginal$Case == "Train")
length(inTrain)
inTrain = which(segmentationOriginal$Case == "Train")
training = segmentationOriginal[inTrain,]
testing  = segmentationOriginal[-inTrain,]
set.seed(125)
modelFit =  train(Class ~ ., data = training, method = 'rpart')
modelFit$finalModel
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgmm)
install.packages('pgmm'')
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
oliveModel = train(Area ~., data=olive, method='rpart')
oliveModel$finalModel
install.packages('tree')
require(tree)
head(olive)
oliveTree = tree(Area ~ ., data=olive)
oliveTree
?tree
predict(oliveTree, newdata)
newdata = as.data.frame(t(colMeans(olive)))
predict(oliveTree, newdata)
table(olive$Area)
head(train)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages(ElemStatLearn)
install.packages('ElemStatLearn'')
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
set.seed(13234)
hdModel = train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial")
hdModel = train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
hdModel
set.seed(13234)
hdModel = train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, method="glm", family="binomial")
trainPred = predict(hdModel, newdata=trainSA)
testPred  = predict(hdModel, newdata=testSA)
str(testPred)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainMC = missClass(trainSA$chd, trainPred)
testMC  = missClass(testSA$chd, testPred)
trainMC
testMC
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.test)
head(vowel.train)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
install.packages(randomForest)
install.packages('randomForest')
require(randomForest)
set.seed(33833)
vowelForest = randomForest(y ~., data=vowel.train)
str(vowelForest)
varImp(vowelForest, useModel = 0)
importance(vowelForest)
sort(importance(vowelForest))
important(vowelForest)[order(importance(vowelForest))]
importance(vowelForest)[order(importance(vowelForest))]
imps = importance(vowelForest)
imps
rownames(imps)
rownames(imps)[order(imps, decreasing = TRUE)]
require(caret)
source('D:/Documents/Other Courses/Practical Machine Learning/Project/R/model.R')
traceback
source('D:/Documents/Other Courses/Practical Machine Learning/Project/R/model.R')
testingDf = testingDf[, -c(windowColumns, summaryColumns)]
testingDf = testingDf[, 6:58]
testSetPreds = lapply(models, function(x){predict(x, newdata=testingDf)})
testSetMatrix = matrix(unlist(testSetPreds), ncol = nrow(testingDf), nrow = K, byrow = TRUE)
finalTestPredict = apply(testSetMatrix, MARGIN = 2, vote)
### Do my predictions on the testing set ###
testingDf  = read.csv("./data/pml-testing.csv")
testingDf = testingDf[, -c(windowColumns, summaryColumns)]
testingDf = testingDf[, 6:58]
testSetPreds = lapply(models, function(x){predict(x, newdata=testingDf)})
testSetMatrix = matrix(unlist(testSetPreds), ncol = nrow(testingDf), nrow = K, byrow = TRUE)
finalTestPredict = apply(testSetMatrix, MARGIN = 2, v
ote)
### Do my predictions on the testing set ###
testingDf  = read.csv("./data/pml-testing.csv")
testingDf = testingDf[, -c(windowColumns, summaryColumns)]
testingDf = testingDf[, 6:58]
testSetPreds = lapply(models, function(x){predict(x, newdata=testingDf)})
testSetMatrix = matrix(unlist(testSetPreds), ncol = nrow(testingDf), nrow = K, byrow = TRUE)
finalTestPredict = apply(testSetMatrix, MARGIN = 2, vote)
finalTestPredict
finalCm
